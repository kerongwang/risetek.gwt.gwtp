package com.risetek.server.shiro;

import java.io.IOException;
import java.util.UUID;

import javax.inject.Singleton;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.oltu.oauth2.client.request.OAuthClientRequest;
import org.apache.oltu.oauth2.client.request.OAuthClientRequest.AuthenticationRequestBuilder;
import org.apache.oltu.oauth2.common.OAuth;
import org.apache.oltu.oauth2.common.exception.OAuthSystemException;

/**
 * OAuth Client
 *  
 * 本服务重定向Login页面到OAuth Server的登录界面。
 * 本服务根据项目的需要配置对应的ClientID和重定向URI
 * @author wangyc@risetek.com
 *
 */

@Singleton
@WebServlet(value = "/oauth/login")
public class OAuthLoginUrlBuilderServlet extends HttpServlet implements IOAuthConfig {
	private static final long serialVersionUID = 3898978461211429449L;

	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String url = req.getRequestURL().toString();
		// XXX: hacker demo login
		boolean isDemo = (url.indexOf("/demo/oauth/login") >= 0);

		String location, redirectURI, client_id = null;
		if(isDemo) {
			// middle stage for demo only.
			redirectURI = "/#/devops/client"; // url.replace("/demo/oauth/login", "/#/devops/client");
			location = IOAuthConfig.loginURI; // url.replace("/demo/oauth/login", IOAuth.authzEndpoint);
			client_id = IOAuthConfig.client_id; // "demo";
		} else if(null == IOAuthConfig.endpointLocation){
			redirectURI = IOAuthConfig.tokenURI;
			location = IOAuthConfig.loginURI;
			client_id = IOAuthConfig.client_id_local;
		} else {
			redirectURI = url.replace("/oauth/login", IOAuthConfig.tokenURI);
			location = IOAuthConfig.endpointLocation + IOAuthConfig.loginURI;
			client_id = IOAuthConfig.client_id;
		}

		// Put state into session which you'll verify later.
		String state = UUID.randomUUID().toString();

		try {
			AuthenticationRequestBuilder builder = OAuthClientRequest
					.authorizationLocation(location)
                    .setClientId(client_id)
                    // state - A random string generated by your application,
                    // which you'll verify later
                    .setState(state)
                    .setResponseType(OAuth.OAUTH_CODE)
                    // Real world, redirectURI should be OAuth Client Servlet Path.
                    // login View redirect to OAuth Client Servlet with code.
                    // refer to oauthCodeAuthzResponse.
                    .setRedirectURI(redirectURI)
                    // scope - One or more scope values indicating which parts of
                    // the user's account you wish to access
                    .setScope("authz");
			
			req.getSession().setAttribute(IOAuthConfig.state_key, state);
			resp.sendRedirect(builder.buildQueryMessage().getLocationUri());
		} catch (OAuthSystemException ex) {
			ex.printStackTrace();
		}
	}
}
