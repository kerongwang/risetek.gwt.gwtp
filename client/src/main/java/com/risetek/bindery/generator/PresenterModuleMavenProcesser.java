package com.risetek.bindery.generator;

import java.io.IOException;
import java.io.Writer;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;

import com.gwtplatform.mvp.client.gin.AbstractPresenterModule;
import com.risetek.bindery.AutoLoadPresenterModule;
import com.risetek.entry.ClientModule;

@SupportedAnnotationTypes("com.risetek.bindery.AutoLoadPresenterModule")
public class PresenterModuleMavenProcesser extends AbstractProcessor {
	private Filer mFiler;
	private Messager mMessager;
	private Elements mElementUtils;
	
	@Override
    public SourceVersion getSupportedSourceVersion() {
        if (SourceVersion.latest().compareTo(SourceVersion.RELEASE_8) > 0)
            return SourceVersion.latest();

        return SourceVersion.RELEASE_8;
    }	

	@Override
	public void init(ProcessingEnvironment processingEnv) {
		super.init(processingEnv);
		mFiler = processingEnv.getFiler();
		mMessager = processingEnv.getMessager();
		mElementUtils = processingEnv.getElementUtils();
	}

	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
		Set<? extends Element> bindViewElements = roundEnv.getElementsAnnotatedWith(AutoLoadPresenterModule.class);
		
		if(bindViewElements.size() == 0)
			return false;

        try {
            JavaFileObject jfo = mFiler.createSourceFile("com.risetek.entry.MavenProcessedPresenterModuleLoader", new Element[]{});
            Writer writer = jfo.openWriter();
	        StringBuilder builder = new StringBuilder();
	        builder.append("package com.risetek.entry" + ";\n\n");
	        builder.append("//Auto generated by apt,do not modify!!\n\n");
	        
	        builder.append("public class MavenProcessedPresenterModuleLoader extends " + AbstractPresenterModule.class.getName() + " { \n\n");

	        builder.append("  protected void configure() { \n");
	        builder.append("    install(new " + ClientModule.class.getName() + "());\n");

	        for (Element element : bindViewElements) {
	            PackageElement packageElement = mElementUtils.getPackageOf(element);
	    		note("Process: " + packageElement.getQualifiedName() + "." + element.getSimpleName());
		        builder.append("    install(new " + packageElement.getQualifiedName() + "." + element.getSimpleName() + "());\n");
	        	
	        }

	        builder.append("  }\n");
	        builder.append("}");

	        writer.write(builder.toString());
            writer.flush();
            writer.close();
        } catch (IOException e) {
        	note("Processer Exception:" + e);
            e.printStackTrace();
        }
        return true;
	}

	 private void note(String msg) {
	        mMessager.printMessage(Diagnostic.Kind.NOTE, msg);
    }
}
